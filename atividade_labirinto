'''
Code War - 07/04/2022
Tema: Projeto Labirinto
Projeto incompleto
'''

from itertools import product

LABIRINTO = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'], 
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'], 
    ['#', ' ', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#'], 
    ['#', '#', '#', '#', '#', '#', ' ', ' ', '4', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#'], 
    ['#', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#'], 
    ['#', '#', '#', '#', '#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'], 
    ['#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', '#'], 
    ['#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', '#'], 
    ['#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', '#'], 
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'S', '#']
]

def print_labirinto(labirinto: list[list]) -> None:
    '''A função formata a lista labirinto para imprimir na tela
    o parâmetro labirinto como uma matriz.'''
    for linha in labirinto:
        print(''.join(linha))

print_labirinto(LABIRINTO)

def direcoes(movimento: str) -> list:
    '''A função transforma direções em coordenadas'''     
    movimento = movimento.strip()
    movimento = movimento.casefold()
        
    if movimento == 'esquerda':
        direcao = [0, -1]
    elif movimento == 'direita':
        direcao = [0, 1]
    elif movimento == 'cima':
        direcao = [-1, 0]
    elif movimento == 'baixo':
        direcao = [1, 0]
      
    return direcao

direcoes('cima')

def movimento(labirinto: list[list], posicao: tuple, movimento: str) ->  list:
    '''A função marca a posição já percorrida na matriz pelo robô como ".", e a posição atual do robô como "X".
    A função retorna o par ordenado correspondente a próxima posicao que o robô deverá assumir na matriz.
    Labirinto indica a matriz de labirinto que o robô irá percorrer. 
    Posicao indica a posicao a qual o robo está na matriz. 
    Direcao corresponde o movimento que o robo deverá fazer na matriz.'''  
    coordenadas = list(product(range(0, len(labirinto)+1), repeat=2)) # lista de tuplas
    if posicao not in coordenadas:
        print('Posição não está contida nas dimensões da matriz') 
    direcao = direcoes(movimento)
     
    labirinto[posicao[0]][posicao[1]] = '.'
    labirinto[posicao[0]+ direcao[0]][posicao[1]+ direcao[1]] = 'X'
    return [posicao[0] + direcao[0], posicao[1] + direcao[1]]

movimento(LABIRINTO, (0, 3), 'baixo')

def verifica_movimento(labirinto: list[list[str]], posicao: tuple, movimento: str) -> bool:
    '''A função verifica se o movimento escolhido pelo usuário é possivel. 
    O robô não pode passar por paredes ("#") e não deve escolher caminhos
    já percorridos (".").'''
    coordenadas = list(product(range(0, len(labirinto)+1), repeat=2))
    if posicao not in coordenadas:
        print('Posição não está contida nas dimensões da matriz') 
    
    direcao = direcoes(movimento)
    
    if labirinto[posicao[0] + direcao[0]][posicao[1] + direcao[1]] == 'S':
        situacao = 'Saída, Sucesso!'
    elif labirinto[posicao[0] + direcao[0]][posicao[1] + direcao[1]] == ' ':
        situacao = 'Caminho Livre'
    elif labirinto[posicao[0] + direcao[0]][posicao[1] + direcao[1]] == '#':
        situacao = 'Parede'
    elif labirinto[posicao[0] + direcao[0]][posicao[1] + direcao[1]] == '.':
        situacao = 'Caminho já percorrido!'
    
    if situacao == 'Caminho Livre':
        return True
    else:
        return False

verifica_movimento(LABIRINTO, (0,0), 'esquerda')
